# Algorithm for Bisimulation
Input: 
  - Transition matrix T representing the Probabilistic Transition System
  - Set of states X (state space)
  - Termination vector Term (indicates which states are terminating)
  - (Optional) Transition labels

Output:
  - Minimized transition matrix T_min
  - Equivalence classes of states (modulo probabilistic bisimulation)
  - (Optional) Minimized transition labels
  - Termination status for each equivalence class

Algorithm:
1. Initialize:
   - Let R_0 = X × X (all pairs of states are initially considered equivalent).
   - Partition states by termination status: only states with the same status can be equivalent.
   - Set n = 0.

2. Define the refinement function f:
   - For a relation R ⊆ X × X, define:
     f(R) = {(x, y) | 
               (i) ∀z ∈ X: t(x, [z]_R) = t(y, [z]_R)
               (ii) x terminates ⇔ y terminates
            }
     where t(x, [z]_R) is the total transition probability from x to the equivalence class [z] under R.

3. Iterate to refine R:
   - Repeat until convergence:
     a. Compute R_(n+1) = f(R_n).
     b. If R_(n+1) = R_n (stabilized), break the loop.
     c. Increment n.

4. Construct equivalence classes:
   - Group states x and y into the same equivalence class if (x, y) ∈ R_n.
   - Each class contains only states with the same termination status.

5. Compute the minimized transition matrix and labels:
   - For each equivalence class [C]:
     a. Compute transitions between equivalence classes:
        - T_min([C1], [C2]) = ∑_{x ∈ C1, y ∈ C2} T(x, y) / |C1|.
     b. (Optional) For each class-to-class transition, collect the set of labels from the original transitions.

6. Return the minimized system:
   - Minimized transition matrix T_min.
   - Equivalence classes.
   - (Optional) Minimized transition labels.
   - Termination status for each class.


