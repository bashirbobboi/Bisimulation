def input_markov_chain():
    """Input the transition matrix from the user."""
    num_states = int(input("Enter the number of states: "))
    print("Enter the transition matrix row by row (space-separated, each row must sum to 1):")
    
    matrix = []
    for i in range(num_states):
        row = list(map(float, input(f"Row {i + 1}: ").split()))
        if len(row) != num_states:
            raise ValueError(f"Row {i + 1} must have exactly {num_states} values.")
        if abs(sum(row) - 1) > 1e-6:
            raise ValueError(f"Row {i + 1} must sum to 1.")
        matrix.append(row)
    
    return np.array(matrix)


if __name__ == "__main__":
    # Ask the user to input the Markov chain
    transition_matrix = input_markov_chain()
    state_names = [f"State {i}" for i in range(len(transition_matrix))]
    
    # Visualize the Markov chain
    visualize_with_graphviz(transition_matrix, state_names)